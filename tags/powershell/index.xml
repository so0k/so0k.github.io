<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powershell on Guides and Notes by Vincent</title>
    <link>http://so0k.github.io/tags/powershell/</link>
    <description>Recent content in Powershell on Guides and Notes by Vincent</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>vincent.drl@gmail.com (Vincent De Smet)</managingEditor>
    <webMaster>vincent.drl@gmail.com (Vincent De Smet)</webMaster>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Wed, 24 Feb 2016 17:10:02 +0700</lastBuildDate>
    <atom:link href="http://so0k.github.io/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to quickly group FlatFile records and get a grouped Field maximum</title>
      <link>http://so0k.github.io/2016/02/24/how-to-quickly-group-flatfile-records-and-get-a-grouped-field-maximum/</link>
      <pubDate>Wed, 24 Feb 2016 17:10:02 +0700</pubDate>
      <author>vincent.drl@gmail.com (Vincent De Smet)</author>
      <guid>http://so0k.github.io/2016/02/24/how-to-quickly-group-flatfile-records-and-get-a-grouped-field-maximum/</guid>
      <description>&lt;p&gt;If the data was in a RDBMS you&amp;rsquo;d simply &lt;code&gt;GROUP BY Field1&lt;/code&gt; and &lt;code&gt;SELECT MAX(Field2)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, all I got are: FlatFiles, little time and PowerShell, so Let&amp;rsquo;s GO!&lt;/p&gt;

&lt;p&gt;First, I have to filter down records in the file based on the first 3 characters of each line, only &lt;code&gt;ANV&lt;/code&gt; records were of interest to me, let me load these records in memory real fast:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ANV=gc SSRF-FAH.BAK | ? { $_.substring(0,3) -eq &amp;quot;ANV&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, let&amp;rsquo;s have a look at what the first few records we just loaded look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ANV | Select -First 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which gives me:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ANVA182007                                                                   20130425...
ANVA182600                                                                   20120829...
ANVA182607                                                                   20130425...
ANVA188001                                                                   20120829...
ANVA188010                                                                   20120829...
ANVA188011                                                                   20120829...
ANVA188012                                                                   20120829...
ANVA188014                                                                   20120829...
ANVA188016                                                                   20120829...
ANVA190000                                                                   20120829...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I only care about the first 20 characters and only the last 2 record fields listed below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Start&lt;/th&gt;
&lt;th&gt;Length&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;RecordType&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;td&gt;03&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Category&lt;/td&gt;
&lt;td&gt;03&lt;/td&gt;
&lt;td&gt;02&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Code&lt;/td&gt;
&lt;td&gt;05&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Let&amp;rsquo;s create some custom properties to display this data&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ANV | Select `
@{Name=&amp;quot;Category&amp;quot;;Expression={$_.Substring(3,2)}}, `
@{Name=&amp;quot;Code&amp;quot;;Expression={$_.Substring(5,15)}} `
| Select -First 10
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Above we used HashTables (a data structure which stores Key-Value pairs). In PowerShell you write HashTables with the &lt;code&gt;@{&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;}&lt;/code&gt; syntax. The &lt;code&gt;Select-Object&lt;/code&gt; cmdlet accepts a HashTable with &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Expression&lt;/code&gt; Fields to create custom (a.k.a calculated) properties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I actually only want the length of the codes, so getting the Length after trimming the field gives me the following snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ANV | Select `
 @{Name=&amp;quot;Category&amp;quot;;Expression={$_.Substring(3,2)}}, `
 @{Name=&amp;quot;CodeLength&amp;quot;;Expression={$_.Substring(5,15).trim().Length}} `
 | Select -First 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s group by the &lt;code&gt;Category&lt;/code&gt; Field:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ANV | Select `
@{Name=&amp;quot;Category&amp;quot;;Expression={$_.Substring(3,2)}}, `
@{Name=&amp;quot;CodeLength&amp;quot;;Expression={$_.Substring(5,15).trim().Length}} | `
Group Category | Select -First 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Count Name                      Group
----- ----                      -----
   16 A1                        {@{Category=A1; CodeLength=5}, @{Category=A1; Code...}}
   13 A3                        {@{Category=A3; CodeLength=4}, @{Category=A3; Code...}}
  530 A4                        {@{Category=A4; CodeLength=1}, @{Category=A4; Code...}}
  351 A6                        {@{Category=A6; CodeLength=4}, @{Category=A6; Code...}}
    1 A7                        {@{Category=A7; CodeLength=5}}
    3 C4                        {@{Category=C4; CodeLength=1}, @{Category=C4; Code...}}
  216 I1                        {@{Category=I1; CodeLength=3}, @{Category=I1; Code...}}
    3 I3                        {@{Category=I3; CodeLength=1}, @{Category=I3; Code...}}
    8 I4                        {@{Category=I4; CodeLength=2}, @{Category=I4; Code...}}
   40 M0                        {@{Category=M0; CodeLength=4}, @{Category=M0; Code...}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, only thing left to do is get the maximum &lt;code&gt;CodeLength&lt;/code&gt; per &lt;code&gt;Category&lt;/code&gt;&amp;hellip; most Google results tell you to sort and select the first &lt;code&gt;ForEach&lt;/code&gt; group. &lt;code&gt;%&lt;/code&gt; is a shortcut for &lt;code&gt;ForEach&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ANV | Select `
@{Name=&amp;quot;Category&amp;quot;;Expression={$_.Substring(3,2)}}, `
@{Name=&amp;quot;CodeLength&amp;quot;;Expression={$_.Substring(5,15).trim().Length}} | `
Group Category | %{ $_.Group | Sort CodeLength -Descending | Select -First 1 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exactly what I needed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Category CodeLength
-------- ----------
A1                5
A3                4
A4                9
A6                5
A7                5
C4                1
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now back to the boring parts :(&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Kill a Hanging Hyper-V VM</title>
      <link>http://so0k.github.io/2016/01/13/how-to-kill-a-hanging-hyper-v-vm/</link>
      <pubDate>Wed, 13 Jan 2016 12:56:56 +0700</pubDate>
      <author>vincent.drl@gmail.com (Vincent De Smet)</author>
      <guid>http://so0k.github.io/2016/01/13/how-to-kill-a-hanging-hyper-v-vm/</guid>
      <description>

&lt;p&gt;After boasting how fast I got a NodeJS container to do play with some npm packages, as seen in my previous post, I crashed the Hyper-V VM I was using&amp;hellip;&lt;/p&gt;

&lt;p&gt;I accidentally disconnected the external hard disk from which the CoreOS VM was running (due to an ageing USB cable) and I could no longer shut it down. Asking Hyper-V to turn of the power didn&amp;rsquo;t work also. The &lt;a href=&#34;https://technet.microsoft.com/en-us/library/hh848468.aspx&#34;&gt;&lt;code&gt;Stop-VM&lt;/code&gt;&lt;/a&gt; cmdlet was quite useless.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Stop-VM -Force
#hanging...#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was not the first time I faced this issue, but I couldn&amp;rsquo;t find my notes on how I fixed it last time (I remember it was possible to get the ProcessId from a Hyper-V VM and just kill the process, should be simple&amp;hellip;), time to properly jot it down this time for future reference&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;solution:1f197efabed05d8c95ecc233ef878914&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;I started by looking at the Properties exposed by the &lt;code&gt;Microsoft.HyperV.PowerShell.VirtualMachine&lt;/code&gt; object returned from the &lt;code&gt;Get-VM&lt;/code&gt; cmdlet. Use the &lt;code&gt;Get-Member&lt;/code&gt; cmdlet for this (or the &lt;code&gt;GM&lt;/code&gt; alias) and filter for things such as &amp;laquo;Process&amp;raquo; and &amp;laquo;Id&amp;raquo; (still falling back to old command tools such as &lt;code&gt;findstr&lt;/code&gt; out of habit&amp;hellip;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Get-VM | GM | findstr /I &amp;quot;id&amp;quot;
Get-VM | GM | findstr /I &amp;quot;proc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Didn&amp;rsquo;t return what I was looking for&amp;hellip;&lt;/p&gt;

&lt;p&gt;Having a look at the Name and Id property gave me this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get-VM | ft Id, Name
Id                                   Name
--                                   ----
3b5532af-93ae-4aa5-86e3-474a9e3638a0 coreos2
5c46b6d3-d4c5-4cfb-8587-84bbdeb3158a Win2k12-Sql2k12-Sun442
d591db38-0cce-474c-99be-d076b312c553 Win2k3-SQL2008R2-Sun433
ea0c01ad-8c66-4f84-99f4-df80e40ef3da Win2k8-Ora11.2-Sun44
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did have to resort to Google and it turns out Hyper-V uses this Id when starting the VM Worker Process (&lt;code&gt;vmwp&lt;/code&gt;), a TaskList showing the CommandLine will tell you that clearly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get-WmiObject win32_process -Filter &amp;quot;name like &#39;%vmwp%&#39;&amp;quot; | select CreationDate,ProcessId,CommandLine | ft -AutoSize
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s all I needed to know to kill the VM&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Stop-Process 13432
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s always easier if you let the computer do the matching for you, &lt;a href=&#34;http://vniklas.djungeln.se/2013/01/30/find-correlation-between-vmwp-process-and-vm-in-hyper-v-2012/&#34;&gt;This blog post shows you how&lt;/a&gt;, break tis down as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Get the VM Id parsed out of the CommandLine by splitting on the space and returning the 2nd element in the array (0-based indexing):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get-WmiObject win32_process -Filter &amp;quot;name like &#39;%vmwp%&#39;&amp;quot; | select {$_.CommandLine.split(&amp;quot; &amp;quot;)[1] }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use a Dictionary object to assign a proper name to the property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get-WmiObject win32_process -Filter &amp;quot;name like &#39;%vmwp%&#39;&amp;quot; | select ProcessId, @{Label=&amp;quot;VM.Id&amp;quot;;Expression={$_.CommandLine.split(&amp;quot; &amp;quot;)[1]}}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pass this GUID to the &lt;code&gt;Get-VM&lt;/code&gt; cmdlet and return the &lt;code&gt;Name&lt;/code&gt; property from the &lt;code&gt;Microsoft.HyperV.PowerShell.VirtualMachine&lt;/code&gt; Object associated with each running &lt;code&gt;vmwp&lt;/code&gt; Process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get-WmiObject Win32_Process -Filter &amp;quot;Name like &#39;%vmwp%&#39;&amp;quot; | select ProcessId, `
@{Label=&amp;quot;VM.Name&amp;quot;;Expression={(Get-VM -Id $_.Commandline.split(&amp;quot; &amp;quot;)[1]).Name}}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hyper-V restarted the VM as soon as its worker process died, but this time it was responding properly&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>