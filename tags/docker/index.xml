<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Guides and Notes by Vincent</title>
    <link>http://so0k.github.io/tags/docker/</link>
    <description>Recent content in Docker on Guides and Notes by Vincent</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>vincent.drl@gmail.com (Vincent De Smet)</managingEditor>
    <webMaster>vincent.drl@gmail.com (Vincent De Smet)</webMaster>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Thu, 21 Jan 2016 12:52:58 +0700</lastBuildDate>
    <atom:link href="http://so0k.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker v1.10</title>
      <link>http://so0k.github.io/2016/01/21/docker-v1.10/</link>
      <pubDate>Thu, 21 Jan 2016 12:52:58 +0700</pubDate>
      <author>vincent.drl@gmail.com (Vincent De Smet)</author>
      <guid>http://so0k.github.io/2016/01/21/docker-v1.10/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Docker 1.10 is coming&lt;/strong&gt; and as with any release in the ever fast moving world of Docker, it is good to find out more about the use cases for the newly introduced commands, below is a list of the interesting changes that stood out for me so far:&lt;/p&gt;

&lt;h3 id=&#34;container-mutability-and-the-new-docker-update-command:61aa534034babfc14972e5e817552dee&#34;&gt;Container Mutability and the new &lt;code&gt;docker update&lt;/code&gt; command&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docker/docker/pull/15078&#34;&gt;Relevant pull request&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Usage: docker update [OPTIONS] CONTAINER [CONTAINER...]

Updates container resource limits

  --blkio-weight=0           Block IO (relative weight), between 10 and 1000
  --cpu-shares=0             CPU shares (relative weight)
  --cpu-period=0             Limit the CPU CFS (Completely Fair Scheduler) period
  --cpu-quota=0              Limit the CPU CFS (Completely Fair Scheduler) quota
  --cpuset-cpus=&amp;quot;&amp;quot;           CPUs in which to allow execution (0-3, 0,1)
  --cpuset-mems=&amp;quot;&amp;quot;           Memory nodes (MEMs) in which to allow execution (0-3, 0,1)
  -m, --memory=&amp;quot;&amp;quot;            Memory limit
  --memory-reservation=&amp;quot;&amp;quot;    Memory soft limit
  --memory-swap=&amp;quot;&amp;quot;           Total memory (memory + swap), &#39;-1&#39; to disable swap
  --kernel-memory=&amp;quot;&amp;quot;         Kernel memory limit: container must be stopped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The docker update command dynamically updates container resources. Use this command to prevent containers from consuming too many resources from their Docker host. With a single command, you can place limits on a single container or on many. To specify more than one container, provide space-separated list of container names or IDs.&lt;/p&gt;

&lt;p&gt;With the exception of the &lt;code&gt;--kernel-memory&lt;/code&gt; value, you can specify these options on a running or a stopped container. You can only update &lt;code&gt;--kernel-memory&lt;/code&gt; on a stopped container. When you run docker update on stopped container, the next time you restart it, the container uses those values.&lt;/p&gt;

&lt;p&gt;Prior to 1.10, once the Docker Daemon created a container for the Image you chose to run, it did not give you an easy way to change the configuration you specified with the &lt;code&gt;docker run&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;From a technical perspective, Docker exposes a layer above a set of technologies (cgroups, namespaces, iptables, filesystems, &amp;hellip;) to provide its users an easy way of managing these resources for their applications. One could always dig into these layers to make adjustments behind the daemons&amp;rsquo; back.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/19897743/exposing-a-port-on-a-live-docker-container&#34;&gt;Exposing ports on a live container&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;This Stack Overflow question gives us this very usefull snippet&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#get the container IP
CONTAINER_IP=$(docker inspect -f &#39;{{ .NetworkSettings.IPAddress }}&#39; container_name)
#forward packets from port 8001 on your host to port 8000 on the container
iptables -t nat -A DOCKER -p tcp --dport 8001 -j DNAT --to-destination ${CONTAINER_IP}:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://superuser.com/questions/803772/remove-exposed-port-from-docker/808124&#34;&gt;See Also&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/&#34;&gt;Managing Docker resources with Cgroups&lt;/a&gt; (September 2014)&lt;/p&gt;

&lt;p&gt;Either by interacting with &lt;code&gt;cgroups&lt;/code&gt; directly or if running Docker with Systemd, using &lt;code&gt;systemctl&lt;/code&gt; to set properties on the systemd scope of the container, also refer to the &lt;a href=&#34;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Resource_Management_Guide/&#34;&gt;Redhat Resource Management Guide&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://www.freedesktop.org/software/systemd/man/systemd.resource-control.html&#34;&gt;systemd resource control&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo systemctl set-property docker-4be96b853089bc6044b29cb873cac460b429cfcbdd0e877c0868eb2a901dbf80.scope CPUShares=512
#show all the properties:
systemctl show docker-4be96b853089bc6044b29cb873cac460b429cfcbdd0e877c0868eb2a901dbf80.scope
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://jpetazzo.github.io/2015/01/13/docker-mount-dynamic-volumes/&#34;&gt;Attaching Volumes to a running container&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But going behind the back of the Docker Daemon does not provide any logs or audit trails and may cause unexpected side effects, moreover - giving users the ability apply these changes through the Docker API only makes sense given it is possible to achieve underneath&amp;hellip; but up to what point?&lt;/p&gt;

&lt;p&gt;This brings us to a very important question: &lt;strong&gt;How much of a container should be mutable?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With Docker 1.9, networks could be &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/network_connect/&#34;&gt;connected &amp;amp; disconnected&lt;/a&gt; from a Container and containers could be &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/rename/&#34;&gt;renamed&lt;/a&gt; while all other aspects are immutable from the Docker daemon&amp;rsquo;s perspective.&lt;/p&gt;

&lt;p&gt;With the addition of the &lt;a href=&#34;https://github.com/docker/docker/blob/v1.10.0-rc1/docs/reference/commandline/update.md&#34;&gt;&lt;code&gt;docker update&lt;/code&gt;&lt;/a&gt; command in 1.10, CPU/Memory resources can be changed dynamically (except the &lt;code&gt;--kernel-memory&lt;/code&gt; setting which requires a container restart) and are persisted in the container definition to ensure they still apply after restarts.&lt;/p&gt;

&lt;p&gt;Adding support for exposing ports, changing container restart policies and &lt;a href=&#34;https://github.com/docker/docker/pull/18958&#34;&gt;labels&lt;/a&gt; are being worked on , but do not seem to be planned for the 1.10 release, but what about &lt;code&gt;Environment variables&lt;/code&gt;?&lt;/p&gt;

&lt;h3 id=&#34;container-network-model-service-discovery:61aa534034babfc14972e5e817552dee&#34;&gt;Container Network Model - Service Discovery&lt;/h3&gt;

&lt;p&gt;With the 1.9 release, Docker moved its networking libraries from the experimental branch to the production ready branch. Networking brought a big change in the way containers find each other, deprecating Docker links as well as adding cross-host support with overlay (vxlan) networks (replacing the ambassador container pattern).&lt;/p&gt;

&lt;p&gt;Docker links worked by modifying the &lt;code&gt;/etc/hosts&lt;/code&gt; files within the containers, bypassing DNS lookups. The new networking model built further on this approach to provide cluster wide service discovery. Unfortunately, making changes to a shared resource (&lt;code&gt;/etc/hosts&lt;/code&gt;) in a non-atomic way and scaling &lt;a href=&#34;https://github.com/docker/docker/issues/17190&#34;&gt;will never go hand in hand&lt;/a&gt;. The service discovery model was in desperate need for a change.&lt;/p&gt;

&lt;p&gt;As highlighted by Ahmet Alp Balkan in his &lt;a href=&#34;https://youtu.be/WXESsPqC8to&#34;&gt;excellent DockerCon EU 2015 presentation&lt;/a&gt;, most Service Discovery solutions gravitate towards the tested and proven DNS protocol. Some of the drawbacks highlighted such as IP caching and no respect for TLS are solved by Cluster Management Systems such as Kubernetes by fully decoupling the service endpoint from the implementation through labels and fixed IP service resources.&lt;/p&gt;

&lt;p&gt;The fix by the Docker networking team for 1.10 would be to &lt;a href=&#34;https://github.com/docker/docker/issues/17195&#34;&gt;bundle a DNS server with the Docker Daemon&lt;/a&gt; and expose this service within the namespace of every container. This would certainly be a much better solution than the current one, but the fact that &lt;strong&gt;neither the previous &lt;code&gt;/etc/hosts&lt;/code&gt; nor the upcoming DNS server are &lt;em&gt;optional&lt;/em&gt;&lt;/strong&gt; is still &lt;a href=&#34;http://blog.kubernetes.io/2016/01/why-Kubernetes-doesnt-use-libnetwork.html&#34;&gt;not making some people happy&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to quickly get an up to date looking resume</title>
      <link>http://so0k.github.io/2016/01/13/how-to-quickly-get-an-up-to-date-looking-resume/</link>
      <pubDate>Wed, 13 Jan 2016 09:35:36 +0700</pubDate>
      <author>vincent.drl@gmail.com (Vincent De Smet)</author>
      <guid>http://so0k.github.io/2016/01/13/how-to-quickly-get-an-up-to-date-looking-resume/</guid>
      <description>

&lt;p&gt;It never hurts to keep your resume up to date and after 9 years of negligence, mine looked terribly out dated. (won&amp;rsquo;t share a picture)&lt;/p&gt;

&lt;p&gt;After spending some time looking around on &lt;a href=&#34;http://resumes.reddit.com&#34;&gt;/r/resumes&lt;/a&gt;, I came across &lt;a href=&#34;http://jsonresume.org&#34;&gt;jsonresume.org&lt;/a&gt; and played around with their online resume editor.&lt;/p&gt;

&lt;p&gt;Convinced this was a very useful tool I wanted to take it for a spin locally, but as I do not have Node on my freshly installed Windows 10 machine, it seems it would take a while to get it up and running locally&amp;hellip;&lt;/p&gt;

&lt;p&gt;Well, this isn&amp;rsquo;t really an issue if you have a local Docker daemon (I still had a CoreOS VM with a Nodejs image ready). But if you&amp;rsquo;re on Windows, you had to do some leg work in advance, I will go through the Windows steps as well. If you do not have an appropriate Windows environment set up already, it will obviously be a LOT faster to simply install NodeJS, but I had everything pre-configured so this really just took me 5 minutes (no lies, I promise!).&lt;/p&gt;

&lt;h2 id=&#34;ensure-your-docker-daemon-is-running:91365d17c2334facda03bb4e3d4f873d&#34;&gt;Ensure your Docker Daemon is running&lt;/h2&gt;

&lt;p&gt;Bring up the VM with PowerShell (Run As Administrator required &amp;amp; assuming you had created a CoreOS VM previously):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;$vm = Start-Vm -PassThru coreos2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Monitor the boot process, or don&amp;rsquo;t (this isn&amp;rsquo;t necessary, just handy to know when CoreOS has finished booting):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;vmconnect $env:COMPUTERNAME $vm.Name -G $vm.Id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open a shell to the VM, or just &lt;code&gt;export DOCKER_HOST=tcp://192.158.233.130:2375&lt;/code&gt; if you&amp;rsquo;ve activated the &lt;code&gt;Systemctl enable docker.socket&lt;/code&gt; (I didn&amp;rsquo;t):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh core@192.168.233.130
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: You can get the IP of the VM using the &lt;code&gt;lvms&lt;/code&gt; alias I described &lt;a href=&#34;http://so0k.github.io/2016/01/07/about-this-blog-and-my-setup&#34;&gt;here&lt;/a&gt; or just read it from the Virtual Machine Connection &lt;code&gt;vmconnect&lt;/code&gt; window if you opened it earlier.&lt;/p&gt;

&lt;h2 id=&#34;optionally-mount-windows-host-files-to-your-coreos-vm:91365d17c2334facda03bb4e3d4f873d&#34;&gt;Optionally, Mount Windows host files to your CoreOS VM&lt;/h2&gt;

&lt;p&gt;I had already configured my CoreOS to mount shared folders from my Windows host, here are the steps to achieve this, if you can&amp;rsquo;t do this yet:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ensure the windows path is shared, mine is &amp;laquo;D:\prj\&amp;raquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;Get-WmiObject -Class Win32_Share -Filter &amp;quot;path=&#39;D:\\prj&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your path is not shared, you can share any path using PowerShell with the following command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;(Get-WmiObject Win32_Share -List).Create
  (
    &amp;quot;D:\prj\&amp;quot;, &amp;quot;prj&amp;quot;, 0
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://windowsitpro.com/powershell/managing-file-shares-windows-powershell&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ensure the mount.cifs binary is available on CoreOS, I made a &lt;a href=&#34;https://hub.docker.com/r/so0k/mount.cifs_copy/&#34;&gt;popular Docker Image&lt;/a&gt; available on the Docker Hub to achieve this. The following command downloads the image and copies &lt;code&gt;mount.cifs&lt;/code&gt; to &lt;code&gt;/opt/bin/&lt;/code&gt; on the CoreOS Host:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v /opt/bin:/target so0k/mount.cifs-copy:6.4 /target
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mount the samba share in CoreOS&lt;/p&gt;

&lt;p&gt;Use the following bash script &lt;code&gt;vim mounthost.sh&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash


SMB_HOST=${SMB_HOST:-192.168.233.1}
SMB_SHARE=${SMB_SHARE:-share}
SMB_USER=${SMB_USER:-user}
WIN_MOUNT=${WIN_MOUNT:-/mnt/win}
read -s -p &amp;quot;Password: &amp;quot; SMB_PASS
printf &amp;quot;\n&amp;quot;
printf &amp;quot;mounting drive to $WIN_MOUNT\n&amp;quot;
sudo /opt/bin/mount.cifs //$SMB_HOST/$SMB_SHARE $WIN_MOUNT -o nolock,username=$SMB_USER,pass=$SMB_PASS,iocharset=utf8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make the script executable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod +x mounthost.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;set the expected env variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export SMB_HOST=192.168.233.1
export SMB_SHARE=prj
export SMB_USER=my.username
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the script, you will be prompted for your password:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./mounthost
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;start-a-nodejs-container-and-install-jsonresume:91365d17c2334facda03bb4e3d4f873d&#34;&gt;Start a NodeJS container and install jsonresume&lt;/h2&gt;

&lt;p&gt;Create a new container using the official NodeJS Docker Image (no tag = latest tag), this will be pulled if you do not have an image already. (I can only confirm this works with &lt;code&gt;node:0.12&lt;/code&gt; which is the version I already had on my daemon)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --name resume -p 4000:4000 -v /mnt/win:/mnt/win --entrypoint /bin/bash node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This exposes port &lt;code&gt;4000&lt;/code&gt; on the container to port &lt;code&gt;4000&lt;/code&gt; on the Docker host, mounts the &lt;code&gt;/mnt/win/&lt;/code&gt; directory into the container and changes the entrypoint to &lt;code&gt;/bin/bash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Install &lt;code&gt;resume-cli&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g resume-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;confirm all is working using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resume --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jsonresume/resume-cli&#34;&gt;Read full instructions on the GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you used the online editor to create a json file, copy the file to your shared folder on your windows machine and serve the file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /mnt/win/
mkdir jsonresume
cd /mnt/win/jsonresume
 resume export cv.html --theme flat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the time of writing, the resume-cli server did not work, so no live editing locally&amp;hellip; but here&amp;rsquo;s a static version of &lt;a href=&#34;http://so0k.github.io/cv.html&#34;&gt;my updated cv&lt;/a&gt; using the Flat theme..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes Workshop for Docker Saigon</title>
      <link>http://so0k.github.io/2016/01/07/kubernetes-workshop-for-docker-saigon/</link>
      <pubDate>Thu, 07 Jan 2016 12:27:33 +0700</pubDate>
      <author>vincent.drl@gmail.com (Vincent De Smet)</author>
      <guid>http://so0k.github.io/2016/01/07/kubernetes-workshop-for-docker-saigon/</guid>
      <description>

&lt;p&gt;This is &lt;a href=&#34;http://so0k.github.io/do/preview/how-to-provision-a-kubernetes-cluster-using-coreos.html&#34;&gt;the first draft of a guide&lt;/a&gt; I wrote to set up Kubernetes with CoreOS on DigitalOcean. This guide is battle-tested through a workshop for the &lt;a href=&#34;http://docker-saigon.github.io&#34;&gt;Docker-Saigon&lt;/a&gt; Meetup Group. During the workshop, Users may use this draft to follow along with the instructions until the guide has been officially published on Digital Ocean.&lt;/p&gt;

&lt;p&gt;Attendees need to have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A laptop (Linux/OSX/Windows should all be fine)&lt;/li&gt;
&lt;li&gt;A console ready to go with access to &lt;code&gt;git&lt;/code&gt; &amp;amp; &lt;code&gt;openssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://www.digitalocean.com/?refcode=d6a3f4aecbdf&#34;&gt;Digital Ocean&lt;/a&gt; account ready (if you do not have an account, feel free to sign up with &lt;a href=&#34;https://www.digitalocean.com/?refcode=d6a3f4aecbdf&#34;&gt;my referral link&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Decent Docker knowledge&lt;/li&gt;
&lt;li&gt;Some CoreOS / Systemd knowledge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I estimate it takes about 3 hours to work through the guide.&lt;/p&gt;

&lt;h3 id=&#34;digital-ocean-article-preview-do-preview-how-to-provision-a-kubernetes-cluster-using-coreos-html&#34;&gt;&lt;a href=&#34;http://so0k.github.io/do/preview/how-to-provision-a-kubernetes-cluster-using-coreos.html&#34;&gt;Digital Ocean Article Preview&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Using the &lt;a href=&#34;https://www.digitalocean.com/community/markdown&#34;&gt;Markdown Preview Generator from Digital Ocean&lt;/a&gt; I generated and copied the article preview &lt;a href=&#34;http://so0k.github.io/do/preview/how-to-provision-a-kubernetes-cluster-using-coreos-v2.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://so0k.github.io/do/preview/how-to-provision-a-kubernetes-cluster-using-coreos.html&#34;&gt;&lt;img src=&#34;http://so0k.github.io/assets/images/sammy-jetpack.png&#34; alt=&#34;Sammy Jetpack!&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Logo &amp;copy; Digital Ocean and designed by &lt;a href=&#34;https://twitter.com/simonoxleee&#34;&gt;Simon Oxley&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT - 2016-01-08&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added link to Article Preview&lt;/li&gt;
&lt;li&gt;Removed full article from blog post as HighlightJS was causing rendering issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;EDIT - 2016-01-13&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;replaced link to Article Preview to point to v2&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>